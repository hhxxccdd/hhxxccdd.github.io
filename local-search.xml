<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode</title>
    <link href="/2025/08/05/leetcode/"/>
    <url>/2025/08/05/leetcode/</url>
    
    <content type="html"><![CDATA[<h2 id="力扣刷题"><a href="#力扣刷题" class="headerlink" title="力扣刷题"></a>力扣刷题</h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p> <a href="https://leetcode.cn/problems/binary-search/description/">704. 二分查找 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/search-insert-position/description/">35. 搜索插入位置 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></p><p><img src="/.io//08/05/leetcode/image-20250714205602263.png" alt="image-20250714205602263"></p><p><a href="https://leetcode.cn/problems/sqrtx/solutions/1185134/li-yong-er-fen-fa-qiu-ping-fang-gen-si-l-r847/">69. x 的平方根 - 力扣（LeetCode）</a></p><p><img src="/.io//08/05/leetcode/image-20250714210823779.png" alt="image-20250714210823779"></p><p><a href="https://leetcode.cn/problems/valid-perfect-square/submissions/644461909/">367. 有效的完全平方数 - 力扣（LeetCode）</a></p><p><img src="/.io//08/05/leetcode/image-20250716164635679.png" alt="image-20250716164635679"></p><p>核心思想： 还是进行二分，若是完全平方数，则可以在[0，nums-1]中找到解，如果跳出循环，即left &gt; right  证明没有解，说明不是有效完全平方数</p><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><p><a href="https://leetcode.cn/problems/remove-element/submissions/644466187/">27. 移除元素 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">26. 删除有序数组中的重复项 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/move-zeroes/submissions/644474084/">283. 移动零 - 力扣（LeetCode）</a>、</p><p><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串 - 力扣（LeetCode）</a></p><p><img src="/.io//08/05/leetcode/image-20250717193639433.png" alt="image-20250717193639433"></p><p>关于js中等号的知识：对象和数组比较引用</p><p><img src="/.io//08/05/leetcode/image-20250717193717861.png" alt="image-20250717193717861"></p><p><img src="/.io//08/05/leetcode/image-20250717193749747.png" alt="image-20250717193749747"></p><p>双指针写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">t</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> backspaceCompare = <span class="hljs-keyword">function</span>(<span class="hljs-params">s, t</span>) &#123;  <span class="hljs-comment">// 由于 # 号只会消除左边的一个字符，所以对右边的字符无影响，所以我们选择从后往前遍历 S，T 字符串</span><br><br>    <span class="hljs-comment">//双指针写法</span><br>     <span class="hljs-keyword">let</span> i = s.<span class="hljs-property">length</span>-<span class="hljs-number">1</span><br>     <span class="hljs-keyword">let</span> j = t.<span class="hljs-property">length</span>-<span class="hljs-number">1</span><br>     <span class="hljs-keyword">let</span> skipi = <span class="hljs-number">0</span><br>     <span class="hljs-keyword">let</span> skipj = <span class="hljs-number">0</span><br><br>     <span class="hljs-comment">//同时循环两个字符串，但是循环的速度并不是同步</span><br>     <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>)&#123;<br><br>         <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span>)&#123;    <span class="hljs-comment">//没遇到&#x27;#&#x27;和skipi = 0 的情况，就暂停移动指针，等j指针暂停时，进行单个字符的比较</span><br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;#&#x27;</span>)&#123;    <br>                skipi++<br>                i--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(skipi &gt; <span class="hljs-number">0</span>)&#123;<br>                skipi--<br>                i--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span><br>         &#125;<br><br>          <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(t[j] == <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                skipj++<br>                j--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(skipj &gt; <span class="hljs-number">0</span>)&#123;<br>                skipj--<br>                j--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span><br>         &#125;<br><br><br>         <span class="hljs-keyword">if</span>(s[i] != t[j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">//存在一个不等的情况，直接返回false                                                                             </span><br><br>         i--<br>         j--<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/solutions/447736/you-xu-shu-zu-de-ping-fang-by-leetcode-solution/">977. 有序数组的平方 - 力扣（LeetCode）</a></p><h4 id="经典滑动窗口"><a href="#经典滑动窗口" class="headerlink" title="经典滑动窗口"></a>经典滑动窗口</h4><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> minSubArrayLen = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, nums</span>) &#123;<br><br>    <span class="hljs-comment">//双指针，滑动窗口</span><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> ans = <span class="hljs-title class_">Infinity</span><br><br>    <span class="hljs-keyword">while</span> (right &lt;= nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        sum += nums[right]     <span class="hljs-comment">//刚开始时右指针不断前移，累计sum值</span><br>        <br>        <span class="hljs-keyword">while</span> (sum &gt;= target) &#123;     <span class="hljs-comment">//直到碰到sum &gt;= target 的情况 ，来移动左指针</span><br><br>             ans = ans &lt; (right - left + <span class="hljs-number">1</span>) ? ans : (right - left + <span class="hljs-number">1</span>)<br>             sum -= nums[left]<br>             left++<br>        &#125;<br>          right++   <span class="hljs-comment">//右指针的移动一定要放在检查完sum值之后，否则就会比正确的值大1</span><br>    &#125;<br>  <br>     <span class="hljs-keyword">return</span> ans == <span class="hljs-title class_">Infinity</span> ? <span class="hljs-number">0</span> : ans<br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="水果成篮"><a href="#水果成篮" class="headerlink" title="水果成篮"></a>水果成篮</h4><p><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮 - 力扣（LeetCode）</a></p><p>用数组的方式代替哈希，实现哈希的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">fruits</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> totalFruit = <span class="hljs-keyword">function</span> (<span class="hljs-params">fruits</span>) &#123;<br><br>    <span class="hljs-comment">//用数组代替哈希</span><br><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">100000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">let</span> kind = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> ans = <span class="hljs-number">0</span><br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; fruits.<span class="hljs-property">length</span>; right++ ) &#123;<br><br>        <span class="hljs-keyword">if</span> (newArr[fruits[right]]++ === <span class="hljs-number">0</span>) &#123;<br><br>               ++kind<br><br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (kind &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (--newArr[fruits[left++]] === <span class="hljs-number">0</span>) &#123;<br>                --kind<br>            &#125;<br>           <br>        &#125;<br><br>        ans = ans &gt; (right - left + <span class="hljs-number">1</span>) ? ans : (right - left + <span class="hljs-number">1</span>)<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>   left = <span class="hljs-number">0</span>        <span class="hljs-comment">//主要熟悉js中的Map的方法的用法,思路大同小异</span><br>    <span class="hljs-keyword">const</span> cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    <span class="hljs-keyword">let</span> ans = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; fruits.<span class="hljs-property">length</span>; ++right)&#123;<br>             cnt.<span class="hljs-title function_">set</span>(fruits[right],(cnt.<span class="hljs-title function_">get</span>(fruits[right]) || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>)<br><br>             <span class="hljs-keyword">while</span>(cnt.<span class="hljs-property">size</span> &gt; <span class="hljs-number">2</span>)&#123;<br>              cnt.<span class="hljs-title function_">set</span>(fruits[left],cnt.<span class="hljs-title function_">get</span>(fruits[left]) - <span class="hljs-number">1</span>)<br>                   <span class="hljs-keyword">if</span>(cnt.<span class="hljs-title function_">get</span>(fruits[left]) == <span class="hljs-number">0</span>)&#123;<br>                        cnt.<span class="hljs-title function_">delete</span>(fruits[left])<br>                   &#125;<br>                   ++left<br>             &#125;<br><br>              ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(ans, right -left + <span class="hljs-number">1</span>)<br>    &#125;<br><br>     <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-window-substring/description/">76. 最小覆盖子串 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">t</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> minWindow = <span class="hljs-keyword">function</span> (<span class="hljs-params">s, t</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-property">length</span>; i++) &#123;<br>        cnt.<span class="hljs-title function_">set</span>(t[i], (cnt.<span class="hljs-title function_">get</span>(t[i]) || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> r = <span class="hljs-number">0</span>  <span class="hljs-comment">//定义双指针，实现滑动窗口</span><br>    <span class="hljs-keyword">let</span> typesum = cnt.<span class="hljs-property">size</span>   <span class="hljs-comment">//定义字符的种类，不能用cnt.size()进行计算，如果用cnt.delete 则永远都找不到原来的字符</span><br>    <span class="hljs-keyword">while</span> (r &lt;= s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cnt.<span class="hljs-title function_">has</span>(s[r])) &#123;<br>            cnt.<span class="hljs-title function_">set</span>(s[r], cnt.<span class="hljs-title function_">get</span>(s[r]) - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> (cnt.<span class="hljs-title function_">get</span>(s[r]) == <span class="hljs-number">0</span>) &#123;<br>                typesum--<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (typesum == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">let</span> newres = s.<span class="hljs-title function_">substring</span>(l, r + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> (newres.<span class="hljs-property">length</span> &lt; res.<span class="hljs-property">length</span> || !res) &#123;<br>                res = newres<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt.<span class="hljs-title function_">has</span>(s[l]))&#123;<br>                <span class="hljs-keyword">if</span>(cnt.<span class="hljs-title function_">get</span>(s[l]) == <span class="hljs-number">0</span>)&#123;<br>                     typesum++<br>                &#125;<br>                cnt.<span class="hljs-title function_">set</span>(s[l],cnt.<span class="hljs-title function_">get</span>(s[l]) + <span class="hljs-number">1</span>)<br>            &#125;<br>            l++<br>        &#125;<br>        r++<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res<br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h4><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[][]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> generateMatrix = <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br><br><br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right = n-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> bottom = n-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> top = <span class="hljs-number">0</span><br>    <br><br>    <span class="hljs-keyword">while</span>(num &lt;= n*n)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = left; i&lt;=right; i++)&#123;<br>            arr[top][i] = num<br>            num++<br>        &#125;<br>        top++<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = top; i &lt;= bottom; i++)&#123;<br>             arr[i][right] = num<br>             num++<br>        &#125;<br>        right--<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = right; i&gt;=left; i--)&#123;<br>             arr[bottom][i] = num<br>             num++<br>        &#125;<br>        bottom--<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = bottom; i&gt;=top; i--)&#123;<br>            arr[i][left] = num<br>            num++<br>        &#125;<br>        left++<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr<br><br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵 - 力扣（LeetCode）</a></p><p>*** 因为行列不是同步减少，所以要检测出访问越界 ***</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[][]</span>&#125; <span class="hljs-variable">matrix</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> spiralOrder = <span class="hljs-keyword">function</span> (<span class="hljs-params">matrix</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> m = matrix.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">const</span> n = matrix[<span class="hljs-number">0</span>].<span class="hljs-property">length</span><br><br>    <span class="hljs-keyword">const</span> arr = []<br><br>    <span class="hljs-keyword">let</span> step = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right = n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> bottom = m - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> top = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">while</span> (step &lt;= m * n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = left; i &lt;= right; i++) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[top][i])<br>            step++<br>        &#125;<br>        top++<br>         <span class="hljs-keyword">if</span> (top &gt; bottom) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 检查是否还有行需要处理</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = top; i &lt;= bottom; i++) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[i][right])<br>            step++<br>        &#125;<br>        right--<br>        <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = right; i &gt;= left; i--) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[bottom][i])<br>            step++<br>        &#125;<br>        bottom--<br>          <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = bottom; i &gt;= top; i--) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[i][left])<br>            step++<br>        &#125;<br>        left++<br>         <span class="hljs-keyword">if</span> (top &gt; bottom) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 检查是否还有行需要处理</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr<br><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><a href="https://leetcode.cn/problems/3u1WK4/submissions/647785249/">LCR 023. 相交链表 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * function ListNode(val) &#123;</span><br><span class="hljs-comment"> *     this.val = val;</span><br><span class="hljs-comment"> *     this.next = null;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ListNode</span>&#125; <span class="hljs-variable">headA</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ListNode</span>&#125; <span class="hljs-variable">headB</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">ListNode</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> getIntersectionNode = <span class="hljs-keyword">function</span>(<span class="hljs-params">headA, headB</span>) &#123;<br><br>    <span class="hljs-comment">//采用双指针的思想</span><br>    <span class="hljs-comment">// let a = headA</span><br>    <span class="hljs-comment">// let b = headB</span><br><br>    <span class="hljs-comment">// while(a != b)&#123;</span><br><br>    <span class="hljs-comment">//    a = a != null ? a.next : headB </span><br>    <span class="hljs-comment">//    b = b != null ? b.next : headA</span><br><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// return a</span><br><br>    <span class="hljs-comment">//采用哈希的思想</span><br>    <span class="hljs-keyword">const</span> cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br><br>    <span class="hljs-keyword">while</span>(headA != <span class="hljs-literal">null</span>)&#123;<br>        cnt.<span class="hljs-title function_">add</span>(headA)<br>        headA = headA.<span class="hljs-property">next</span><br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(headB != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(cnt.<span class="hljs-title function_">has</span>(headB))&#123;<br>             <span class="hljs-keyword">return</span> headB<br>        &#125;<br>        headB = headB.<span class="hljs-property">next</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><a href="https://leetcode.cn/problems/reverse-string/description/">344. 反转字符串 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">character[]</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify s in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseString = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br><br>       <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">let</span> right = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>       <span class="hljs-keyword">let</span> temp<br><br>       <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br><br>          temp  = s[left]<br>          s[left] = s[right]<br>          s[right] = temp<br>          left++<br>          right--<br>          <br>       &#125;<br><br>       <span class="hljs-keyword">return</span> s<br>       <br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/reverse-string-ii/submissions/647807090/">541. 反转字符串 II - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">k</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseStr = <span class="hljs-keyword">function</span> (<span class="hljs-params">s, k</span>) &#123;  <br><br>     <span class="hljs-keyword">const</span> length = s.<span class="hljs-property">length</span><br><br>     <span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(s)<br><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i += <span class="hljs-number">2</span>*k)&#123;<br>          <span class="hljs-title class_">Reverse</span>(i,<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(i+k,length)-<span class="hljs-number">1</span>,arr)<span class="hljs-comment">//前4个字符串其实是 arr[0]-arr[3]</span><br>     &#125;<br>  <br>      <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <br><br>   <br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Reverse</span> = (<span class="hljs-params">left, right, s</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> temp<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br><br>        temp = s[left]<br>        s[left] = s[right]<br>        s[right] = temp<br>        left++<br>        right--<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br><br><br>    <span class="hljs-keyword">const</span> length = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> left = length<br>    <span class="hljs-keyword">let</span> right = left<br><br>    <span class="hljs-keyword">const</span> arr = []<br><br>    <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">0</span>)&#123;<br><br>        <span class="hljs-keyword">while</span>(right &gt;= <span class="hljs-number">0</span> &amp;&amp; s[right] == <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            right--<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(right &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br><br>        left = right <span class="hljs-comment">//说明后面一定有字符串</span><br><br>        <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br><br><br>        <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">0</span> &amp;&amp; s[left] != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            left--<br>        &#125;<br><br>      <br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = left+<span class="hljs-number">1</span>; i&lt;=right; i++)&#123;<br>             arr.<span class="hljs-title function_">push</span>(s[i])<br>        &#125;<br><br>       right = left<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>   <br><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>*** <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</a> *           ——–有点小问题（能用数字标记尽量用数字标记，多一个数字，可以简化很多思维）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">haystack</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">needle</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> strStr = <span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) &#123;<br><br><br>    <span class="hljs-keyword">let</span> lengthA = haystack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> lengthB = needle.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> leftA = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> leftB = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">while</span> (leftA &lt;= lengthA) &#123;<br><br>        <span class="hljs-keyword">if</span> (haystack[leftA] == needle[leftB]) &#123;<br><br>            <span class="hljs-keyword">const</span> start = leftA;<br><br>            <span class="hljs-keyword">while</span> (leftB &lt;= lengthB &amp;&amp; haystack[leftA] == needle[leftB]) &#123;<br>                leftA++<br>                leftB++<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (leftB == needle.<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-keyword">return</span> start<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                leftB = <span class="hljs-number">0</span><br>                leftA = start+ <span class="hljs-number">1</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            leftA++<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
