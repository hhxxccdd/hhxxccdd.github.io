<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Prototype Chain</title>
    <link href="/2025/08/07/Prototype-Chain/"/>
    <url>/2025/08/07/Prototype-Chain/</url>
    
    <content type="html"><![CDATA[<h1 id="一-在js中引用类型皆对象"><a href="#一-在js中引用类型皆对象" class="headerlink" title="一. 在js中引用类型皆对象"></a>一. 在<code>js</code>中引用类型皆对象</h1><p>原型和原型链都是来源于对象而服务于对象的概念，所以我们要先明确一点：</p><p><strong>JavaScript中一切引用类型都是对象，对象就是属性的集合。</strong></p><p><code>Array类型</code>、<code>Function类型</code>、<code>Object类型</code>、<code>Date类型</code>、<code>RegExp类型</code>等都是引用类型。</p><p>也就是说 <strong>数组是对象、函数是对象、正则是对象、对象还是对象。</strong></p><p><img src="/2025/08/07/Prototype-Chain/image-20250811091052302.png" alt="image-20250811091052302"></p><h1 id="二-什么是原型与原型链"><a href="#二-什么是原型与原型链" class="headerlink" title="二.什么是原型与原型链"></a>二.什么是原型与原型链</h1><p>每一个对象从被创建开始就和另一个对象关联，从另一个对象上继承其属性，这个<code>另一个对象</code>就是 <strong>原型</strong>。</p><p>当访问一个对象的属性时，先在对象的本身找，找不到就去对象的原型上找，如果还是找不到，就去对象的原型（原型也是对象，也有它自己的原型）的原型上找，如此继续，直到找到为止，或者查找到最顶层的原型对象中也没有找到，就结束查找，返回<code>undefined</code>。</p><p><strong>这条由对象及其原型组成的链就叫做原型链。</strong></p><p>现在我们已经初步理解了原型和原型链，到现在大家明白为什么数组都可以使用<code>push</code>、<code>slice</code>等方法，函数可以使用<code>call</code>、<code>bind</code>等方法了吧，因为在它们的原型链上找到了对应的方法。</p><p>OK，<strong>总结一下</strong>：</p><ol><li><p><strong>原型存在的意义就是组成原型链</strong>：引用类型皆对象，每个对象都有原型，原型也是对象，也有它自己的原型，一层一层，组成原型链。</p></li><li><p><strong>原型链存在的意义就是继承</strong>：访问对象属性时，在对象本身找不到，就在原型链上一层一层找。说白了就是一个对象可以访问其他对象的属性。</p></li><li><p><strong>继承存在的意义就是属性共享</strong>：好处有二：一是代码重用，字面意思；二是可扩展，不同对象可能继承相同的属性，也可以定义只属于自己的属性。</p></li></ol><h1 id="三-什么是原型对象和对象原型（原型分为对象原型和原型对象）"><a href="#三-什么是原型对象和对象原型（原型分为对象原型和原型对象）" class="headerlink" title="三.什么是原型对象和对象原型（原型分为对象原型和原型对象）"></a>三.什么是原型对象和对象原型（原型分为对象原型和原型对象）</h1><h2 id="1-原型对象"><a href="#1-原型对象" class="headerlink" title="1.原型对象"></a>1.原型对象</h2><p>在<code>Java</code>和<code>c++</code>这种面向对象的语言中，往往可以用继承来实现属性和方法的继承。而<code>js</code>并不是一门完全面向对象的语言，那该用什么实现其他语言的效果呢？答案就是原型对象。在<code>es6</code>中，<code>js</code>也新增了继承的特性，但是还是通过原型对象实现的。<em><strong>同时，要注意的是：原型对象也是对象，同样拥有对象原型。这是实现原型链的理论基础</strong></em></p><p>在<code>js</code>中任何函数都有原型对象。每一个<strong>函数</strong>（Function）都有一个 <code>prototype</code> 属性，指向一个<strong>对象</strong>，这个对象就叫<strong>原型对象</strong>。构造函数通过原型对象实现属性和方法的共享，而在普通函数中<code>prototype</code> 默认闲置，但可以手动利用，比如临时当构造函数用，或者存共享数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Hhxc&#x27;</span>,<span class="hljs-number">18</span>)<br>   <br>    <span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Hxc&#x27;</span>,<span class="hljs-number">18</span>)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">say</span> == p2.<span class="hljs-property">say</span>)   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>  通过继承来的同一份方法，却不相等。用二倍的开销存储了这一个函数。造成了严重的开销</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>       <span class="hljs-comment">// this.say = function()&#123;</span><br>       <span class="hljs-comment">//   console.log(this.name + this.age)</span><br>       <span class="hljs-comment">// &#125;</span><br>     &#125;<br><br>     <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>     &#125;<br><br><br>     <span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Hhxc&#x27;</span>,<span class="hljs-number">18</span>)<br>    <br>     <span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Hxc&#x27;</span>,<span class="hljs-number">18</span>)<br><br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">say</span> == p2.<span class="hljs-property">say</span>)   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>  通过原型对象的方式，实现了</p><p><strong>节省内存</strong><br> 如果每个实例都各自保存一份方法，会浪费很多内存；而通过原型，所有实例可以共用一份方法。</p><p><strong>动态扩展功能</strong><br> 即使实例已经创建，你也可以给构造函数的 <code>prototype</code> 增加方法，实例马上就能用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">walk</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is walking`</span>);  <span class="hljs-comment">//谁调用，this就指向谁</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>不需要重新创建实例。</p><p><strong>实现继承</strong><br> 通过修改原型链，可以让一个对象“继承”另一个对象的方法和属性（<code>es6</code> 的 <code>class</code> 其实也是基于这个机制）。</p><h2 id="2-对象原型"><a href="#2-对象原型" class="headerlink" title="2.对象原型"></a>2.对象原型</h2><p>每一个对象在创建时都会有一个隐藏链接<code>[[Prototype]]</code>（大多数浏览器通过 <code>__proto__</code> 访问）。该链接<code>[[Prototype]]</code>指向的是该对象的对象原型（也就是实现这个对象的构造函数的原型对象）。<em><strong>这个指针的作用是：当访问对象的某个属性时，如果对象本身没有，就会沿着 <code>[[Prototype]]</code> 去找，这同样是实现原型链的理论基础</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Hhxc&#x27;</span>,<span class="hljs-number">18</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>同过实现一个简单的模拟数组的方法来说明对象原型的作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Arr</span>(<span class="hljs-params">length</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = length<br>&#125;<br>     <br><span class="hljs-title class_">Arr</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getLength</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span><br>&#125;<br><br><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arr</span>(<span class="hljs-number">10</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">getLength</span>())<br></code></pre></td></tr></table></figure><p>在arr中明明只有length属性，并没有<code>getLenght()</code>方法。他是怎么获得的呢？答案是通过对象原型指向的原型对象获取的。我们在原型对象上定义了一个<code>getLength()</code>方法。只要是通过该构造方法实现的对象，都可以获取到这个方法。这样，就实现了代码的共享。降低了内存的开销。同时也实现了类似继承的效果。</p><h1 id="原型链具体实现与详解"><a href="#原型链具体实现与详解" class="headerlink" title="原型链具体实现与详解"></a>原型链具体实现与详解</h1><p>每一个对象从被创建开始就和另一个对象关联，从另一个对象上继承其属性，这个<code>另一个对象</code>就是 <strong>原型</strong>。</p><p>当访问一个对象的属性时，先在对象的本身找，找不到就去对象的原型上找，如果还是找不到，就去对象的原型（原型也是对象，也有它自己的原型）的原型上找，如此继续，直到找到为止，或者查找到最顶层的原型对象中也没有找到，就结束查找，返回<code>undefined</code>。</p><p><strong>这条由对象及其原型组成的链就叫做原型链。</strong></p><p>原型链是什么意思呢？还是回到最基础的定义，任何对象都有其对象原型。对象原型指向他的原型对象。<strong>注意到原型对象也是对象，只要是对象就有其对象原型，指向一个原型对象。通过这样的一个方式，就实现了一个原型链</strong></p><p>同样，我们还是拿Person举例子。同时，抓住定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)  <span class="hljs-comment">// true</span><br><span class="hljs-comment">//因为p1的__proto__指向Person.prototype， Person.prototype就是他的原型对象，所以</span><br><span class="hljs-comment">//他也有自己的对象原型。指向的是Object.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> ==   <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)  <span class="hljs-comment">// Object.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>)  <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><p>显示，结果已经很清晰了。<strong>原型链</strong>就是：由对象的<code>__proto__</code>属性串连起来的直到<code>Object.prototype.__proto__</code>（为<code>null</code>）的链就是原型链。</p><p>在上面内容的基础之上，我们来模拟一下<code>js</code>引擎读取对象属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getProperty</span>(<span class="hljs-params">obj, propName</span>) &#123;<br>    <span class="hljs-comment">// 在对象本身查找</span><br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(propName)) &#123;<br>        <span class="hljs-keyword">return</span> obj[propName]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">__proto__</span> !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果对象有原型，则在原型上递归查找</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getProperty</span>(obj.<span class="hljs-property">__proto__</span>, propName)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 直到找到Object.prototype，Object.prototype.__proto__为null，返回undefined</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后，来进行一个原型链分析与图解</p><p><img src="/2025/08/07/Prototype-Chain/view.png" alt="preview"></p><p>有点乱？没事，我们先将之前的知识都总结一下，然后慢慢分析此图：</p><p><strong>知识点</strong></p><ol><li>引用类型都是对象，每个对象都有原型对象。</li><li>对象都是由构造函数创建，对象的<code>__proto__</code>属性指向其原型对象，构造函数的<code>prototype</code>属性指向其创建的对象实例的原型对象，所以对象的<code>__proto__</code>属性等于创建它的构造函数的<code>prototype</code>属性。</li><li>所有通过字面量表示法创建的普通对象的构造函数为<code>Object</code></li><li>所有原型对象都是普通对象，构造函数为<code>Object</code></li><li>所有函数的构造函数是<code>Function</code></li><li><code>Object.prototype</code>没有原型对象</li><li>函数也是对象，所以函数也有对象原型<code>[[Prototype]]</code></li></ol><p>OK，我们根据以上六点总结来分析上图，先从左上角的<code>f1</code>、<code>f2</code>入手：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// f1、f2都是通过new Foo()创建的对象，构造函数为Foo，所以有</span><br>f1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-comment">// Foo.prototype为普通对象，构造函数为Object，所以有</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-comment">// Object.prototype没有原型对象</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span><br><br></code></pre></td></tr></table></figure><p>然后对构造函数<code>Foo</code>下手：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Foo是个函数对象，构造函数为Function</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-comment">// Function.prototype为普通对象，构造函数为Object，所以有</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>接着对原生构造函数<code>Object</code>创建的<code>o1</code>、<code>o2</code>下手：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// o1、o2构造函数为Object</span><br>o1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>最后对原生构造函数<code>Object</code>和<code>Function</code>下手：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原生构造函数也是函数对象，其构造函数为Function</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-comment">// 特例</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>分析完毕，也没有想象中那么复杂是吧。</p><p>如果有内容引起不适，建议从头看一遍，或者去看看参考文章内的文章。</p><p>参考文档：<a href="https://segmentfault.com/a/1190000042725370#item-9-1">(1) javascript - 彻底搞懂JS原型与原型链 - 个人文章 - SegmentFault 思否</a></p><p>​                   </p>]]></content>
    
    
    <categories>
      
      <category>JS语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型链</tag>
      
      <tag>Javascript语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode</title>
    <link href="/2025/08/05/leetcode/"/>
    <url>/2025/08/05/leetcode/</url>
    
    <content type="html"><![CDATA[<h2 id="力扣刷题"><a href="#力扣刷题" class="headerlink" title="力扣刷题"></a>力扣刷题</h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p> <a href="https://leetcode.cn/problems/binary-search/description/">704. 二分查找 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/search-insert-position/description/">35. 搜索插入位置 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></p><p><img src="/2025/08/05/leetcode/image-20250714205602263.png" alt="image-20250714205602263"></p><p><a href="https://leetcode.cn/problems/sqrtx/solutions/1185134/li-yong-er-fen-fa-qiu-ping-fang-gen-si-l-r847/">69. x 的平方根 - 力扣（LeetCode）</a></p><p><img src="/2025/08/05/leetcode/image-20250714210823779.png" alt="image-20250714210823779"></p><p><a href="https://leetcode.cn/problems/valid-perfect-square/submissions/644461909/">367. 有效的完全平方数 - 力扣（LeetCode）</a></p><p><img src="/2025/08/05/leetcode/image-20250716164635679.png" alt="image-20250716164635679"></p><p>核心思想： 还是进行二分，若是完全平方数，则可以在[0，nums-1]中找到解，如果跳出循环，即left &gt; right  证明没有解，说明不是有效完全平方数</p><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><p><a href="https://leetcode.cn/problems/remove-element/submissions/644466187/">27. 移除元素 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">26. 删除有序数组中的重复项 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/move-zeroes/submissions/644474084/">283. 移动零 - 力扣（LeetCode）</a>、</p><p><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串 - 力扣（LeetCode）</a></p><p><img src="/2025/08/05/leetcode/image-20250717193639433.png" alt="image-20250717193639433"></p><p>关于js中等号的知识：对象和数组比较引用</p><p><img src="/2025/08/05/leetcode/image-20250717193717861.png" alt="image-20250717193717861"></p><p><img src="/2025/08/05/leetcode/image-20250717193749747.png" alt="image-20250717193749747"></p><p>双指针写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">t</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> backspaceCompare = <span class="hljs-keyword">function</span>(<span class="hljs-params">s, t</span>) &#123;  <span class="hljs-comment">// 由于 # 号只会消除左边的一个字符，所以对右边的字符无影响，所以我们选择从后往前遍历 S，T 字符串</span><br><br>    <span class="hljs-comment">//双指针写法</span><br>     <span class="hljs-keyword">let</span> i = s.<span class="hljs-property">length</span>-<span class="hljs-number">1</span><br>     <span class="hljs-keyword">let</span> j = t.<span class="hljs-property">length</span>-<span class="hljs-number">1</span><br>     <span class="hljs-keyword">let</span> skipi = <span class="hljs-number">0</span><br>     <span class="hljs-keyword">let</span> skipj = <span class="hljs-number">0</span><br><br>     <span class="hljs-comment">//同时循环两个字符串，但是循环的速度并不是同步</span><br>     <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>)&#123;<br><br>         <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span>)&#123;    <span class="hljs-comment">//没遇到&#x27;#&#x27;和skipi = 0 的情况，就暂停移动指针，等j指针暂停时，进行单个字符的比较</span><br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;#&#x27;</span>)&#123;    <br>                skipi++<br>                i--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(skipi &gt; <span class="hljs-number">0</span>)&#123;<br>                skipi--<br>                i--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span><br>         &#125;<br><br>          <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(t[j] == <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                skipj++<br>                j--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(skipj &gt; <span class="hljs-number">0</span>)&#123;<br>                skipj--<br>                j--<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span><br>         &#125;<br><br><br>         <span class="hljs-keyword">if</span>(s[i] != t[j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">//存在一个不等的情况，直接返回false                                                                             </span><br><br>         i--<br>         j--<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/solutions/447736/you-xu-shu-zu-de-ping-fang-by-leetcode-solution/">977. 有序数组的平方 - 力扣（LeetCode）</a></p><h4 id="经典滑动窗口"><a href="#经典滑动窗口" class="headerlink" title="经典滑动窗口"></a>经典滑动窗口</h4><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> minSubArrayLen = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, nums</span>) &#123;<br><br>    <span class="hljs-comment">//双指针，滑动窗口</span><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> ans = <span class="hljs-title class_">Infinity</span><br><br>    <span class="hljs-keyword">while</span> (right &lt;= nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        sum += nums[right]     <span class="hljs-comment">//刚开始时右指针不断前移，累计sum值</span><br>        <br>        <span class="hljs-keyword">while</span> (sum &gt;= target) &#123;     <span class="hljs-comment">//直到碰到sum &gt;= target 的情况 ，来移动左指针</span><br><br>             ans = ans &lt; (right - left + <span class="hljs-number">1</span>) ? ans : (right - left + <span class="hljs-number">1</span>)<br>             sum -= nums[left]<br>             left++<br>        &#125;<br>          right++   <span class="hljs-comment">//右指针的移动一定要放在检查完sum值之后，否则就会比正确的值大1</span><br>    &#125;<br>  <br>     <span class="hljs-keyword">return</span> ans == <span class="hljs-title class_">Infinity</span> ? <span class="hljs-number">0</span> : ans<br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="水果成篮"><a href="#水果成篮" class="headerlink" title="水果成篮"></a>水果成篮</h4><p><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮 - 力扣（LeetCode）</a></p><p>用数组的方式代替哈希，实现哈希的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">fruits</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> totalFruit = <span class="hljs-keyword">function</span> (<span class="hljs-params">fruits</span>) &#123;<br><br>    <span class="hljs-comment">//用数组代替哈希</span><br><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">100000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">let</span> kind = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> ans = <span class="hljs-number">0</span><br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; fruits.<span class="hljs-property">length</span>; right++ ) &#123;<br><br>        <span class="hljs-keyword">if</span> (newArr[fruits[right]]++ === <span class="hljs-number">0</span>) &#123;<br><br>               ++kind<br><br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (kind &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (--newArr[fruits[left++]] === <span class="hljs-number">0</span>) &#123;<br>                --kind<br>            &#125;<br>           <br>        &#125;<br><br>        ans = ans &gt; (right - left + <span class="hljs-number">1</span>) ? ans : (right - left + <span class="hljs-number">1</span>)<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>   left = <span class="hljs-number">0</span>        <span class="hljs-comment">//主要熟悉js中的Map的方法的用法,思路大同小异</span><br>    <span class="hljs-keyword">const</span> cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    <span class="hljs-keyword">let</span> ans = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> right = <span class="hljs-number">0</span>; right &lt; fruits.<span class="hljs-property">length</span>; ++right)&#123;<br>             cnt.<span class="hljs-title function_">set</span>(fruits[right],(cnt.<span class="hljs-title function_">get</span>(fruits[right]) || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>)<br><br>             <span class="hljs-keyword">while</span>(cnt.<span class="hljs-property">size</span> &gt; <span class="hljs-number">2</span>)&#123;<br>              cnt.<span class="hljs-title function_">set</span>(fruits[left],cnt.<span class="hljs-title function_">get</span>(fruits[left]) - <span class="hljs-number">1</span>)<br>                   <span class="hljs-keyword">if</span>(cnt.<span class="hljs-title function_">get</span>(fruits[left]) == <span class="hljs-number">0</span>)&#123;<br>                        cnt.<span class="hljs-title function_">delete</span>(fruits[left])<br>                   &#125;<br>                   ++left<br>             &#125;<br><br>              ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(ans, right -left + <span class="hljs-number">1</span>)<br>    &#125;<br><br>     <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-window-substring/description/">76. 最小覆盖子串 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">t</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> minWindow = <span class="hljs-keyword">function</span> (<span class="hljs-params">s, t</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-property">length</span>; i++) &#123;<br>        cnt.<span class="hljs-title function_">set</span>(t[i], (cnt.<span class="hljs-title function_">get</span>(t[i]) || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> r = <span class="hljs-number">0</span>  <span class="hljs-comment">//定义双指针，实现滑动窗口</span><br>    <span class="hljs-keyword">let</span> typesum = cnt.<span class="hljs-property">size</span>   <span class="hljs-comment">//定义字符的种类，不能用cnt.size()进行计算，如果用cnt.delete 则永远都找不到原来的字符</span><br>    <span class="hljs-keyword">while</span> (r &lt;= s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cnt.<span class="hljs-title function_">has</span>(s[r])) &#123;<br>            cnt.<span class="hljs-title function_">set</span>(s[r], cnt.<span class="hljs-title function_">get</span>(s[r]) - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> (cnt.<span class="hljs-title function_">get</span>(s[r]) == <span class="hljs-number">0</span>) &#123;<br>                typesum--<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (typesum == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">let</span> newres = s.<span class="hljs-title function_">substring</span>(l, r + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> (newres.<span class="hljs-property">length</span> &lt; res.<span class="hljs-property">length</span> || !res) &#123;<br>                res = newres<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt.<span class="hljs-title function_">has</span>(s[l]))&#123;<br>                <span class="hljs-keyword">if</span>(cnt.<span class="hljs-title function_">get</span>(s[l]) == <span class="hljs-number">0</span>)&#123;<br>                     typesum++<br>                &#125;<br>                cnt.<span class="hljs-title function_">set</span>(s[l],cnt.<span class="hljs-title function_">get</span>(s[l]) + <span class="hljs-number">1</span>)<br>            &#125;<br>            l++<br>        &#125;<br>        r++<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res<br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h4><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[][]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> generateMatrix = <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br><br><br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right = n-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> bottom = n-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> top = <span class="hljs-number">0</span><br>    <br><br>    <span class="hljs-keyword">while</span>(num &lt;= n*n)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = left; i&lt;=right; i++)&#123;<br>            arr[top][i] = num<br>            num++<br>        &#125;<br>        top++<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = top; i &lt;= bottom; i++)&#123;<br>             arr[i][right] = num<br>             num++<br>        &#125;<br>        right--<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = right; i&gt;=left; i--)&#123;<br>             arr[bottom][i] = num<br>             num++<br>        &#125;<br>        bottom--<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = bottom; i&gt;=top; i--)&#123;<br>            arr[i][left] = num<br>            num++<br>        &#125;<br>        left++<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr<br><br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵 - 力扣（LeetCode）</a></p><p>*** 因为行列不是同步减少，所以要检测出访问越界 ***</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[][]</span>&#125; <span class="hljs-variable">matrix</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> spiralOrder = <span class="hljs-keyword">function</span> (<span class="hljs-params">matrix</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> m = matrix.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">const</span> n = matrix[<span class="hljs-number">0</span>].<span class="hljs-property">length</span><br><br>    <span class="hljs-keyword">const</span> arr = []<br><br>    <span class="hljs-keyword">let</span> step = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right = n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> bottom = m - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> top = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">while</span> (step &lt;= m * n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = left; i &lt;= right; i++) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[top][i])<br>            step++<br>        &#125;<br>        top++<br>         <span class="hljs-keyword">if</span> (top &gt; bottom) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 检查是否还有行需要处理</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = top; i &lt;= bottom; i++) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[i][right])<br>            step++<br>        &#125;<br>        right--<br>        <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = right; i &gt;= left; i--) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[bottom][i])<br>            step++<br>        &#125;<br>        bottom--<br>          <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = bottom; i &gt;= top; i--) &#123;<br>            arr.<span class="hljs-title function_">push</span>(matrix[i][left])<br>            step++<br>        &#125;<br>        left++<br>         <span class="hljs-keyword">if</span> (top &gt; bottom) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 检查是否还有行需要处理</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr<br><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><a href="https://leetcode.cn/problems/3u1WK4/submissions/647785249/">LCR 023. 相交链表 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * function ListNode(val) &#123;</span><br><span class="hljs-comment"> *     this.val = val;</span><br><span class="hljs-comment"> *     this.next = null;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ListNode</span>&#125; <span class="hljs-variable">headA</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ListNode</span>&#125; <span class="hljs-variable">headB</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">ListNode</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> getIntersectionNode = <span class="hljs-keyword">function</span>(<span class="hljs-params">headA, headB</span>) &#123;<br><br>    <span class="hljs-comment">//采用双指针的思想</span><br>    <span class="hljs-comment">// let a = headA</span><br>    <span class="hljs-comment">// let b = headB</span><br><br>    <span class="hljs-comment">// while(a != b)&#123;</span><br><br>    <span class="hljs-comment">//    a = a != null ? a.next : headB </span><br>    <span class="hljs-comment">//    b = b != null ? b.next : headA</span><br><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// return a</span><br><br>    <span class="hljs-comment">//采用哈希的思想</span><br>    <span class="hljs-keyword">const</span> cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br><br>    <span class="hljs-keyword">while</span>(headA != <span class="hljs-literal">null</span>)&#123;<br>        cnt.<span class="hljs-title function_">add</span>(headA)<br>        headA = headA.<span class="hljs-property">next</span><br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(headB != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(cnt.<span class="hljs-title function_">has</span>(headB))&#123;<br>             <span class="hljs-keyword">return</span> headB<br>        &#125;<br>        headB = headB.<span class="hljs-property">next</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><a href="https://leetcode.cn/problems/reverse-string/description/">344. 反转字符串 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">character[]</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify s in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseString = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br><br>       <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">let</span> right = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>       <span class="hljs-keyword">let</span> temp<br><br>       <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br><br>          temp  = s[left]<br>          s[left] = s[right]<br>          s[right] = temp<br>          left++<br>          right--<br>          <br>       &#125;<br><br>       <span class="hljs-keyword">return</span> s<br>       <br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/reverse-string-ii/submissions/647807090/">541. 反转字符串 II - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">k</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseStr = <span class="hljs-keyword">function</span> (<span class="hljs-params">s, k</span>) &#123;  <br><br>     <span class="hljs-keyword">const</span> length = s.<span class="hljs-property">length</span><br><br>     <span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(s)<br><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i += <span class="hljs-number">2</span>*k)&#123;<br>          <span class="hljs-title class_">Reverse</span>(i,<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(i+k,length)-<span class="hljs-number">1</span>,arr)<span class="hljs-comment">//前4个字符串其实是 arr[0]-arr[3]</span><br>     &#125;<br>  <br>      <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <br><br>   <br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Reverse</span> = (<span class="hljs-params">left, right, s</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> temp<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br><br>        temp = s[left]<br>        s[left] = s[right]<br>        s[right] = temp<br>        left++<br>        right--<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br><br><br>    <span class="hljs-keyword">const</span> length = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> left = length<br>    <span class="hljs-keyword">let</span> right = left<br><br>    <span class="hljs-keyword">const</span> arr = []<br><br>    <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">0</span>)&#123;<br><br>        <span class="hljs-keyword">while</span>(right &gt;= <span class="hljs-number">0</span> &amp;&amp; s[right] == <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            right--<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(right &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br><br>        left = right <span class="hljs-comment">//说明后面一定有字符串</span><br><br>        <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;<br><br><br>        <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">0</span> &amp;&amp; s[left] != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            left--<br>        &#125;<br><br>      <br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = left+<span class="hljs-number">1</span>; i&lt;=right; i++)&#123;<br>             arr.<span class="hljs-title function_">push</span>(s[i])<br>        &#125;<br><br>       right = left<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>   <br><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>*** <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</a> * **   能用数字标记尽量用数字标记，多一个数字，可以简化很多思维</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">haystack</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">needle</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> strStr = <span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) &#123;<br><br><br>    <span class="hljs-keyword">let</span> lengthA = haystack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> lengthB = needle.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">let</span> leftA = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> leftB = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">while</span> (leftA &lt;= lengthA) &#123;<br><br>        <span class="hljs-keyword">if</span> (haystack[leftA] == needle[leftB]) &#123;<br><br>            <span class="hljs-keyword">const</span> start = leftA;<br><br>            <span class="hljs-keyword">while</span> (leftB &lt;= lengthB &amp;&amp; haystack[leftA] == needle[leftB]) &#123;<br>                leftA++<br>                leftB++<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (leftB == needle.<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-keyword">return</span> start<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                leftB = <span class="hljs-number">0</span><br>                leftA = start+ <span class="hljs-number">1</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            leftA++<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈和数组"><a href="#栈和数组" class="headerlink" title="栈和数组"></a>栈和数组</h3><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/submissions/650166792/">232. 用栈实现队列 - 力扣（LeetCode）</a>      <em><strong>涉及到原型链的知识，会上转一篇关于原型链的blog</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyQueue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackin</span> = []<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span> = []<br>    <br>&#125;;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackin</span>.<span class="hljs-title function_">push</span>(x)<br>    <br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pop</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span>.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">if</span>(length)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span>.<span class="hljs-title function_">pop</span>()<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackin</span>.<span class="hljs-property">length</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackin</span>.<span class="hljs-title function_">pop</span>()) <span class="hljs-comment">//栈只能用pop()和push()</span><br>    &#125;                                          <span class="hljs-comment">//如果只用一个栈，那么pop()和push()方法完全抵消了</span><br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span>.<span class="hljs-title function_">pop</span>()<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">peek</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span>.<span class="hljs-title function_">push</span>(x)<br><br>    <span class="hljs-keyword">return</span> x<br>    <br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">empty</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">return</span>  !<span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackin</span>.<span class="hljs-property">length</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">Stackout</span>.<span class="hljs-property">length</span><br>    <br>&#125;;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * Your MyQueue object will be instantiated and called as such:</span><br><span class="hljs-comment"> * var obj = new MyQueue()</span><br><span class="hljs-comment"> * obj.push(x)</span><br><span class="hljs-comment"> * var param_2 = obj.pop()</span><br><span class="hljs-comment"> * var param_3 = obj.peek()</span><br><span class="hljs-comment"> * var param_4 = obj.empty()</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/submissions/650177552/">225. 用队列实现栈 - 力扣（LeetCode）</a> <em><strong><code>shift()</code> 方法在 JavaScript 数组中的使用，实际上是 队列 的操作</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyStack</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span> = []<br><br>    <br>&#125;;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">push</span>(x)<br>    <br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pop</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">let</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">length</span><br><br>      <span class="hljs-keyword">while</span>(length-- &gt; <span class="hljs-number">1</span>)&#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">shift</span>()) <span class="hljs-comment">//队列只能用push()和shift()</span><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">shift</span>()<br>    <br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">top</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">push</span>(x)<br>    <span class="hljs-keyword">return</span> x<br><br><br>    <br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">empty</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">return</span>   !<span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">length</span><br>    <br>&#125;;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * Your MyStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * var obj = new MyStack()</span><br><span class="hljs-comment"> * obj.push(x)</span><br><span class="hljs-comment"> * var param_2 = obj.pop()</span><br><span class="hljs-comment"> * var param_3 = obj.top()</span><br><span class="hljs-comment"> * var param_4 = obj.empty()</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/valid-parentheses/submissions/650839537/">20. 有效的括号 - 力扣（LeetCode）</a>   <em><strong>借助map的写法</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> isValid = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Stack</span> = []<br><br>    <span class="hljs-keyword">const</span> map = &#123;  <span class="hljs-comment">//关键的一步</span><br>        <span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>: <span class="hljs-string">&#x27;[&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> length = s.<span class="hljs-property">length</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br><br>        <span class="hljs-keyword">if</span> (s[i] <span class="hljs-keyword">in</span> map) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">pop</span>() != map[s[i]]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(s[i])<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Stack</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/valid-parentheses/submissions/650839537/">20. 有效的括号 - 力扣（LeetCode）</a>   <em><strong>纯数组模拟</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Stack</span> = [] <span class="hljs-comment">// 用数组来模拟栈</span><br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++)&#123;<br><br>      <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;(&#x27;</span> || s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>             <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(s[i])<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Stack</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br><br>            <span class="hljs-keyword">const</span> top = <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">pop</span>()<br><br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; top != <span class="hljs-string">&#x27;(&#x27;</span> || s[i] == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; top != <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; top != <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br><br>      &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">return</span>  <span class="hljs-title class_">Stack</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Stack</span> = []   <span class="hljs-comment">//用数组模拟栈</span><br><br>    <span class="hljs-keyword">const</span> length = s.<span class="hljs-property">length</span><br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br><br>        <span class="hljs-keyword">const</span> temp = s[i]<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Stack</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(temp)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-title class_">Stack</span>[<span class="hljs-title class_">Stack</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">pop</span>()<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(temp)<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string[]</span>&#125; <span class="hljs-variable">tokens</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> evalRPN = <span class="hljs-keyword">function</span>(<span class="hljs-params">tokens</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Stack</span> = []   <span class="hljs-comment">//用数组模拟栈</span><br><br>    <span class="hljs-keyword">const</span> length = tokens.<span class="hljs-property">length</span> <br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br><br>         <span class="hljs-keyword">const</span> temp = tokens[i]<br>        <br>         <span class="hljs-keyword">if</span>(temp != <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; temp != <span class="hljs-string">&#x27;-&#x27;</span> &amp;&amp; temp != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; temp != <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>               <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Number</span>(temp))<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br><br>              <span class="hljs-keyword">const</span> num2  =  <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">pop</span>()<br>              <span class="hljs-keyword">const</span> num1  =  <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">pop</span>() <br><br>             <span class="hljs-keyword">if</span>(temp == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>                 <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(num1 + num2)<br>             &#125;<br><br>              <span class="hljs-keyword">if</span>(temp == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                 <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(num1 - num2)<br>             &#125;<br><br>              <span class="hljs-keyword">if</span>(temp == <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                 <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(num1 * num2)<br>             &#125;<br><br>              <span class="hljs-keyword">if</span>(temp == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                 <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">push</span>(<span class="hljs-built_in">parseInt</span>(num1 / num2))<br>             &#125;<br><br>         &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Stack</span>.<span class="hljs-title function_">pop</span>()<br><br><br><br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2025/08/05/leetcode/e130d15c6a4d3993856029bf6d7463de_720.png" alt="e130d15c6a4d3993856029bf6d7463de_720"></p><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/">239. 滑动窗口最大值 - 力扣（LeetCode）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">k</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> maxSlidingWindow = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, k</span>) &#123;<br><br>     <span class="hljs-keyword">let</span> length = nums.<span class="hljs-property">length</span> <br><br>     <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><br>     <span class="hljs-keyword">let</span> temp = <span class="hljs-number">0</span><br><br>     <span class="hljs-keyword">let</span> arr = []<br><br>     <span class="hljs-keyword">while</span>( i + k - <span class="hljs-number">1</span> &lt; length)&#123;<br><br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>                  temp = temp &gt; nums[i+j] ? temp : nums[i+j]<br>           &#125;<br><br>           arr.<span class="hljs-title function_">push</span>(temp)<br><br>           temp = -<span class="hljs-title class_">Infinity</span><br><br>           i++<br><br>     &#125;     <br><br>     <span class="hljs-keyword">return</span> arr     <span class="hljs-comment">// 时间复杂度为O(length * k) 超时</span><br> &#125;;<br></code></pre></td></tr></table></figure><p>第一想法是通过遍历，实现在每一个窗口内进行k次比较从而得出最大值，不出意外的超时了。时间复杂度为O(length*k).即是数组中元素的个数乘于滑动窗口的大小。造成了超时。既然造成的超时，常见的思路还是空间换时间。通过特定的数据结构来减小时间复杂度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">k</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> maxSlidingWindow = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, k</span>) &#123;<br><span class="hljs-comment">//使用双端队列</span><br><br>     <span class="hljs-keyword">let</span> length = nums.<span class="hljs-property">length</span><br>    <br>     <span class="hljs-keyword">let</span> queue = [] <span class="hljs-comment">//双端队列，用来维护最大值</span><br><br>     <span class="hljs-keyword">let</span> result = [] <span class="hljs-comment">//用来存储最大值</span><br><br><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br><br>        <span class="hljs-keyword">if</span>(queue.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; queue[<span class="hljs-number">0</span>] &lt; i - k + <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">//如果超出滑动窗口长度。将队首下标弹出  滑动窗口的范围为 [i-k+1,i]</span><br>               queue.<span class="hljs-title function_">shift</span>()<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(queue.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; nums[queue[queue.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]] &lt; nums[i])&#123; <span class="hljs-comment">//维护队首是最大值</span><br>               queue.<span class="hljs-title function_">pop</span>()<br>        &#125;<br><br>        queue.<span class="hljs-title function_">push</span>(i)  <span class="hljs-comment">//queue存储的是下标</span><br><br>        <span class="hljs-keyword">if</span>(i &gt;= k - <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">//i到达第一个滑动窗口长度-1时，每一轮都会产生一个最大值</span><br>              result.<span class="hljs-title function_">push</span>(nums[queue[<span class="hljs-number">0</span>]])<br>        &#125;<br>           <br>     &#125;<br><br>     <span class="hljs-keyword">return</span> result<br>&#125;;<br></code></pre></td></tr></table></figure><p>通过双端队列，实现对最大值的存储，通过遍历一边数组，就可以得到全体最大值的情况。</p><p>为什么存储下标呢？ 答案是如果不存储下标。则当队首的小标值已经远远落后滑动窗口长度时，无法进行有效的shift().可能会导致在某一个滑动窗口中出现不属于他的最大值。</p><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/solutions/1760658/by-carlsun-2-hybi/">347. 前 K 个高频元素 - 力扣（LeetCode）</a>   <strong>太难了</strong>😭       <strong>以后会手动实现优先队列再重写一遍</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">k</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> topKFrequent = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, k</span>) &#123;<br><br>    <span class="hljs-keyword">let</span> length = nums.<span class="hljs-property">length</span> <br><br>    <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br><br>         map.<span class="hljs-title function_">set</span>(nums[i], map.<span class="hljs-title function_">has</span>(nums[i]) ? map.<span class="hljs-title function_">get</span>(nums[i]) + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>)<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(map.<span class="hljs-property">size</span> ==k) <span class="hljs-keyword">return</span> [...map.<span class="hljs-title function_">keys</span>()]<br><br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(map).<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> b[<span class="hljs-number">1</span>] - a[<span class="hljs-number">1</span>]) <span class="hljs-comment">//b-a默认是降序</span><br>     <br>    <span class="hljs-keyword">return</span>  arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,k).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item[<span class="hljs-number">0</span>])<br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript语法</tag>
      
      <tag>数据结构</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
